<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
  <head>
    <name>Swift</name>
      <charsintokens><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@]]></charsintokens>
      <charsincompletion><![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-@]]></charsincompletion>
      <folding toplevel="2"/>
  </head>
  <states>
    <default id="Base" usesymbolsfrommode="Swift" useautocompletefrommode="Swift" scope="meta.default">
      <import mode="C" keywords-only="yes"/>
      <state-link mode="C" state="Preprocessor"/>
      <state id="Block" type="block" foldable="yes" scope="meta.block.curly">
        <begin>
          <regex>{</regex>
        </begin>
        <end>
          <regex>}</regex>
        </end>
        <import mode="C" keywords-only="yes"/>
        <import/>
      </state>
      <state id="String" type="string" scope="string.double" usespellchecking="yes">
          <begin>
              <regex>"</regex>
          </begin>
          <end>
              <regex>(((?&lt;!\\)(\\\\)*)|^)"</regex>
          </end>
          <keywords id="String Interpolation" useforautocomplete="no" scope="language.variable.string">
              <regex>\\\(([^\)]+)</regex>
          </keywords>
      </state>
      <state id="Comment" type="comment" foldable="yes" scope="comment.block">
          <begin>
              <regex>/\*</regex><autoend>\*/</autoend>
          </begin>
          <end>
              <regex>\*/</regex>
          </end>
      </state>
      <state id="SingleComment" type="comment" scope="comment.line">
          <begin>
              <regex>(?://)|#</regex>
          </begin>
          <end>
              <regex>(?:[\n\r])|.?(?=\?>)</regex>
          </end>
      </state>
      
      <keywords id="Objects and variables" scope="markup.tag.attribute.name" casesensitive="no">
        <regex>var\s(\w+)</regex>
        <regex>let\s(\w+)</regex>
        <regex>(\w+)\.</regex>
      </keywords>
      
      <keywords id="Properties" scope="language.variable" casesensitive="no">
        <regex>\.([a-z]\w+)</regex>
      </keywords>
      
      <keywords id="Keywords" scope="support">
        <string>let</string>
        <string>var</string>
        <string>func</string>
        <string>struct</string>
        <string>class</string>
        <string>enum</string>
        <string>protocol</string>
        <string>extension</string>
        <string>mutating</string>
      </keywords>
      
      <keywords id="Control keywords" scope="keyword.type">
        <string>true</string>
        <string>false</string>
        <string>nil</string>
        <string>as</string>
        <string>in</string>
        <string>return</string>
        <string>override</string>
      </keywords>
      
      <keywords id="Attributes Reference" scope="keyword.type">
        <string>@assignment</string>
        <string>@class_protocol</string>
        <string>@exported</string>
        <string>@final</string>
        <string>@lazy</string>
        <string>@NSCopying</string>
        <string>@NSManaged</string>
        <string>@objc</string>
        <string>@optional</string>
        <string>@required</string>
        <string>@auto_closure</string>
        <string>@noreturn</string>
      </keywords>
      
      <keywords id="Types" scope="style.value.string">
        <string>Array</string>
        <string>Bool</string>
        <string>Character</string>
        <string>Dictionary</string>
        <string>Double</string>
        <string>Float</string>
        <string>Int</string>
        <string>String</string>
        <string>Point</string>
        <string>Size</string>
      </keywords>
      
      <keywords id="Functions" scope="language.function" casesensitive="no">
        <regex>([A-Za-z0-9_]+ *)\(</regex>
      </keywords>
      
      <keywords id="Class and structs" scope="language.function" casesensitive="no">
        <regex>class\s+(\w+)</regex>
        <regex>struct\s+(\w+)</regex>
      </keywords>
      
      <keywords id="Named parameters" scope="language.variable">
        <regex>(\w+):</regex>
      </keywords>
      
      <keywords id="Plus Operator" scope="style.value.keyword">
        <regex>(\+)</regex>
      </keywords>
      
      <keywords id="Minus Operator" scope="style.value.numeric">
        <regex>(\-{1,2})</regex>
      </keywords>
      
      <keywords id="Minus Operator" scope="meta.default">
        <regex>(\-&gt;)</regex>
      </keywords>
      
      
    </default>
  </states>
</syntax>
